#!/usr/bin/env python

import argparse
import time
from datetime import datetime

#bargus -c bytes -s /tmp/t1 -d /tmp/t2


#                              vlan            vlan
def aggregate_bytes_v(dstdown, srcup, srcdown, dstup, outfile, timestamp):
  print timestamp
  timestamp=tuple(timestamp.split('.')[1:])
  timestamp='%s-%s-%s %s:%s:%s.000000' % timestamp
  ts=timestamp+time.strftime('%z')

  bytes = {}
  with open(dstdown, 'r') as f:
    l1 = f.readlines()
  sl1 = [l.strip() for l in l1]
  tl1 = [tuple(l.split(' ')) for l in sl1]
  tl1 = [(ip,ig,0,inPkts,0,inBytes) for (ip,ig,outPkts,inPkts,outBytes,inBytes) in tl1]		#keep only inPkts and inBytes from this

  #vlan tagged uplink
  with open(srcup, 'r') as f:
    l2 = f.readlines()
  sl2 = [l.strip() for l in l2]
  tl2 = [tuple(l.split(' ')) for l in sl2]
  tl2 = [(ip,ig,outPkts,0,outBytes,0) for (ip,ig,outPkts,inPkts,outBytes,inBytes) in tl2]		#keep only outPkts and outBytes from this

  with open(srcdown, 'r') as f:
    l3 = f.readlines()
  sl3 = [l.strip() for l in l3]
  tl3 = [tuple(l.split(' ')) for l in sl3]
  tl3 = [(ip,ig,0,inPkts,0,inBytes) for (ig,ip,inPkts,outPkts,inBytes,outBytes) in tl3]		#keep only inPkts and inBytes from this

  #vlan tagged uplink
  with open(dstup, 'r') as f:
    l4 = f.readlines()
  sl4 = [l.strip() for l in l4]
  tl4 = [tuple(l.split(' ')) for l in sl4]
  tl4 = [(ip,ig,outPkts,0,outBytes,0) for (ig,ip,inPkts,outPkts,inBytes,outBytes) in tl4]		#keep only outPkts and outBytes from this

  lt = tl1 + tl2 + tl3 + tl4

  for t in lt:
    #print t
    ip,_,outPkts,inPkts,outBytes,inBytes = t
    if not ip.startswith('10.30'):	#to throw out header rows and 0.0.0.0 type IPs
      continue
    inPkts = int(inPkts)
    outPkts = int(outPkts)
    inBytes = int(inBytes)
    outBytes = int(outBytes)
    if not ip in bytes:
      bytes[ip] = (inPkts, outPkts, inBytes, outBytes)
    else:
      inpkts,outpkts,inby,outby= bytes[ip]
      bytes[ip] = (inpkts+inPkts, outpkts + outPkts, inby + inBytes, outby + outBytes)


  if outfile != None:
    with open(outfile, 'w') as f:
      for ip in bytes:
        inPkts, outPkts, inBy, outBy = bytes[ip]
        #print ip, inBy, outBy
	f.write('%s,%s,%s,%s,%s,%s\n' % (ts, ip, inPkts, outPkts, inBy, outBy))
      
  return bytes


def aggregate_bytes(srcfile, dstfile, outfile=None, timestamp=None):
  #ts=datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')+time.strftime('%z')
  print timestamp
  #YY,mm,dd,HH,MM,SS=timestamp.split('.')[1:]
  timestamp=tuple(timestamp.split('.')[1:])
  timestamp='%s-%s-%s %s:%s:%s.000000' % timestamp
  ts=timestamp+time.strftime('%z')

  bytes = {}
  with open(srcfile, 'r') as f:
    sl = f.readlines()
  sl = [l.strip() for l in sl]
  slt = [tuple(l.split(' ')) for l in sl]

  with open(dstfile, 'r') as f:
    dl = f.readlines()
  dl = [l.strip() for l in dl]
  dlt = [tuple(l.split(' ')) for l in dl]
  dlt = [(ip,ig,outPkts,inPkts,outBytes,inBytes) for (ig,ip,inPkts,outPkts,inBytes,outBytes) in dlt]

  lt = slt + dlt

  for t in lt:
    #print t
    ip,_,outPkts,inPkts,outBytes,inBytes = t
    if not ip.startswith('10.30'):	#to throw out header rows and 0.0.0.0 type IPs
      continue
    inPkts = int(inPkts)
    outPkts = int(outPkts)
    inBytes = int(inBytes)
    outBytes = int(outBytes)
    if not ip in bytes:
      bytes[ip] = (inPkts, outPkts, inBytes, outBytes)
    else:
      inpkts,outpkts,inby,outby= bytes[ip]
      bytes[ip] = (inpkts+inPkts, outpkts + outPkts, inby + inBytes, outby + outBytes)


  if outfile != None:
    with open(outfile, 'w') as f:
      for ip in bytes:
        inPkts, outPkts, inBy, outBy = bytes[ip]
        #print ip, inBy, outBy
	f.write('%s,%s,%s,%s,%s,%s\n' % (ts, ip, inPkts, outPkts, inBy, outBy))
      
  return bytes

def aggregate_avgrates_v(dstdown, srcup, srcdown, dstup, outfile, timestamp):
  print timestamp
  #timestamp=tuple(timestamp.split('.')[1:])
  #timestamp='%s-%s-%s %s:%s:%s.000000' % timestamp
  #ts=timestamp+time.strftime('%z')


  avgrates = {}
  with open(dstdown, 'r') as f:
    l1 = f.readlines()
  sl1 = [l.strip() for l in l1]
  tl1 = [tuple(l.split(' ')) for l in sl1]
  #slt = [tuple(l.split(' ')) for l in sl]
  tl1 = [(tv,ip,ig,0,inBytes,"0",inAvgrate) for (tv,ip,ig,outBytes,inBytes,outAvgrate,inAvgrate) in tl1]		#keep only inBytes and inAvgrate from this

  #vlan tagged uplink
  with open(srcup, 'r') as f:
    l2 = f.readlines()
  sl2 = [l.strip() for l in l2]
  tl2 = [tuple(l.split(' ')) for l in sl2]
  #dlt = [(tv,ip,ig,outBytes,inBytes,outAvgrate,inAvgrate) for (tv,ig,ip,inBytes,outBytes,inAvgrate,outAvgrate) in dlt]
  tl2 = [(tv,ip,ig,outBytes,0,      outAvgrate,"0") for (tv,ip,ig,outBytes,inBytes,outAvgrate,inAvgrate) in tl2]		#keep only outBytes and outAvgrate from this

  with open(srcdown, 'r') as f:
    l3 = f.readlines()
  sl3 = [l.strip() for l in l3]
  tl3 = [tuple(l.split(' ')) for l in sl3]
  tl3 = [(tv,ip,ig,0,inBytes,"0",inAvgrate) for (tv,ig,ip,inBytes,outBytes,inAvgrate,outAvgrate) in tl3]		#keep only inBytes and inAvgrate from this

  #vlan tagged uplink
  with open(dstup, 'r') as f:
    l4 = f.readlines()
  sl4 = [l.strip() for l in l4]
  tl4 = [tuple(l.split(' ')) for l in sl4]
  tl4 = [(tv,ip,ig,outBytes,0,outAvgrate,"0") for (tv,ig,ip,inBytes,outBytes,inAvgrate,outAvgrate) in tl4]		#keep only outBytes and outAvgrate from this

  lt = tl1 + tl2 + tl3 + tl4

  for t in lt:
    #print t, 
    tv,ip,_,outBytes,inBytes,outAvgrate,inAvgrate= t
    #print inAvgrate.rstrip('*'), outAvgrate.rstrip('*')
    #continue
    if not ip.startswith('10.30'):	#to throw out header rows and 0.0.0.0 type IPs
      continue
    tv=int(tv)
    inAvgrate = int(inAvgrate.rstrip('*'))
    outAvgrate = int(outAvgrate.rstrip('*'))
    inBytes = int(inBytes)
    outBytes = int(outBytes)
    if not (tv,ip) in avgrates:
      avgrates[(tv,ip)] = ((inAvgrate, outAvgrate), (inBytes, outBytes))
    else:
      (inar,outar),(inbytes,outbytes)= avgrates[(tv,ip)]
      avgrates[(tv,ip)] = ((inar + inAvgrate, outar + outAvgrate),(inbytes+inBytes,outbytes+outBytes))

  avgrates = avgrates.items()
  avgrates = sorted(avgrates, key=lambda t: t[0][0])


  if outfile != None:
    with open(outfile, 'w') as f:
      for (tv,ip),((inar,outar),(inbytes,outbytes)) in avgrates:
        #print ip, inar, outar

	ts = time.strftime('%Y-%m-%d %H:%M:%S.000000', time.localtime(tv))
	f.write('%s,%s,%s,%s,%s,%s\n' % (ts, ip, inbytes, outbytes, inar, outar))
      
  return avgrates


def aggregate_avgrates(srcfile, dstfile, outfile=None, timestamp=None):
  #ts=datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')+time.strftime('%z')
  #print timestamp
  #YY,mm,dd,HH,MM,SS=timestamp.split('.')[1:]
  #timestamp=tuple(timestamp.split('.')[1:])
  #timestamp='%s-%s-%s %s:%s:%s.000000' % timestamp
  #ts=timestamp+time.strftime('%z')

  avgrates = {}
  with open(srcfile, 'r') as f:
    sl = f.readlines()
  sl = [l.strip() for l in sl]
  slt = [tuple(l.split(' ')) for l in sl]

  with open(dstfile, 'r') as f:
    dl = f.readlines()
  dl = [l.strip() for l in dl]
  dlt = [tuple(l.split(' ')) for l in dl]
  dlt = [(tv,ip,ig,outBytes,inBytes,outAvgrate,inAvgrate) for (tv,ig,ip,inBytes,outBytes,inAvgrate,outAvgrate) in dlt]

  lt = slt + dlt

  for t in lt:
    #print t, 
    tv,ip,_,outBytes,inBytes,outAvgrate,inAvgrate= t
    #print inAvgrate.rstrip('*'), outAvgrate.rstrip('*')
    #continue
    if not ip.startswith('10.30'):	#to throw out header rows and 0.0.0.0 type IPs
      continue
    tv=int(tv)
    inAvgrate = int(inAvgrate.rstrip('*'))
    outAvgrate = int(outAvgrate.rstrip('*'))
    if not (tv,ip) in avgrates:
      avgrates[(tv,ip)] = ((inAvgrate, outAvgrate), (inBytes, outBytes))
    else:
      (inar,outar),(inbytes,outbytes)= avgrates[(tv,ip)]
      avgrates[(tv,ip)] = ((inar + inAvgrate, outar + outAvgrate),(inbytes+inBytes,outbytes+outBytes))

  avgrates = avgrates.items()
  avgrates = sorted(avgrates, key=lambda t: t[0][0])


  if outfile != None:
    with open(outfile, 'w') as f:
      for (tv,ip),((inar,outar),(inbytes,outbytes)) in avgrates:
        #inar, outar = avgrates[(tv,ip)]
	ts=datetime.fromtimestamp(tv).strftime('%Y-%m-%d %H:%M:%S.000000') + time.strftime('%z')
        #print ip, inar, outar
	f.write('%s,%s,%s,%s,%s,%s\n' % (ts, ip, inbytes, outbytes, inar, outar))
      
  return avgrates

def filter_IPs(reffile, datafile, outfile, append=False):
  with open(reffile, 'r') as f:
    l_ref = f.readlines()
  with open(datafile, 'r') as f:
    l_data = f.readlines()

  #for l in l_ref:
    #print l
  #  print 
  valid_ips = [l.strip().split(',')[1] for l in l_ref]
  filtered_log = [l.strip() for l in l_data if l.strip().split(',')[1] in valid_ips]
  #for l in filtered_log:
  #  print l
  #print valid_ips
  print 'writing to', outfile
  #raw_input()
  if append:
    f = open(outfile, 'a')
  else:
    f = open(outfile, 'w')
    #f.write("%s" % filtered_log)
  for l in filtered_log:
    print >> f, l
  f.close()


def main():
  parser = argparse.ArgumentParser(description='Process some integers.')
  parser.add_argument('-c', '--cmd', dest='cmd', action='store', help='command to process')

  #parser.add_argument('-s', '--src_file', dest='srcfile', action='store', help='file with src filter')
  #parser.add_argument('-d', '--dst_file', dest='dstfile', action='store', help='file with dst filter')

  parser.add_argument('--dstdown', action='store')
  parser.add_argument('--srcup', action='store')
  parser.add_argument('--srcdown', action='store')
  parser.add_argument('--dstup', action='store')

  parser.add_argument('--reffile', action='store')
  parser.add_argument('--datafile', action='store')

  parser.add_argument('-o', '--out_file', dest='outfile', action='store', help='output file')
  parser.add_argument('-t', '--timestamp', dest='timestamp', action='store', help='timestamp upto seconds')
  parser.add_argument('-a', '--append', dest='append', action='store_true')

  args = parser.parse_args()
  #print args

  #if args.cmd == 'bytes':
  #  aggregate_bytes(args.srcfile, args.dstfile, args.outfile, args.timestamp)

  if args.cmd == 'bytes_v':
    aggregate_bytes_v(args.dstdown, args.srcup, args.srcdown, args.dstup, args.outfile, args.timestamp)

  #if args.cmd == 'avgrates':
  #  aggregate_avgrates(args.srcfile, args.dstfile, args.outfile, args.timestamp)

  if args.cmd == 'avgrates_v':
    aggregate_avgrates_v(args.dstdown, args.srcup, args.srcdown, args.dstup, args.outfile, args.timestamp)

  if args.cmd == 'filter_IPs':
    filter_IPs(args.reffile, args.datafile, args.outfile, args.append)
 
if __name__ == '__main__':
  main()
